resource "azurerm_data_factory" "factory" {
  name                = "${local.prefix_minus}-${local.environment}-adf"
  resource_group_name = local.resource_group
  location            = local.location 
  identity {
    type              = "SystemAssigned"
  }
  global_parameter {
    name          = "environment"
    type          = "String"
    value         = "${local.environment}"
  }
  
  global_parameter {
    name          = "prefix"
    type          = "String"
    value         = "${local.prefix_minus}"
  }

  lifecycle {
    ignore_changes = [vsts_configuration,]
  }

}

resource "azurerm_key_vault" "vault" {
  name                      = "${local.prefix}-${local.environment}-kv"
  location                  = local.location
  resource_group_name       = local.resource_group 
  sku_name                  = "standard"
  tenant_id                 = data.azurerm_client_config.current.tenant_id
  tags                      = local.common_tags
}

resource "azurerm_key_vault_access_policy" "pipeline-access" {
  key_vault_id    = azurerm_key_vault.vault.id
  tenant_id       = data.azurerm_client_config.current.tenant_id
  object_id       = data.azurerm_client_config.current.object_id
  key_permissions = [
    "Get","List","Create","Delete","Encrypt","Decrypt","UnwrapKey","WrapKey","Purge","Recover","Restore"
  ]
  secret_permissions = [
    "Get","List","Set","Delete","Purge","Recover","Restore"
  ]
  certificate_permissions = [
    "Backup","Create","Delete","Get","Import","List","Purge","Recover","Restore","Update"
  ]
  storage_permissions = [
    "Get","List","Set","Delete","Purge","Recover","Restore"
  ]
}


resource "azurerm_key_vault_access_policy" "adf-access" {
  key_vault_id    = azurerm_key_vault.vault.id
  tenant_id       = data.azurerm_client_config.current.tenant_id
  object_id       = "${lookup(azurerm_data_factory.factory.identity[0],"principal_id")}"
  
  key_permissions = [
    "Get","List","Create","Delete","Encrypt","Decrypt","UnwrapKey","WrapKey","Purge","Recover","Restore"
  ]
  secret_permissions = [
    "Get","List","Set","Delete","Purge","Recover","Restore"
  ]
  certificate_permissions = [
    "Backup","Create","Delete","Get","Import","List","Purge","Recover","Restore","Update"
  ]
  storage_permissions = [
    "Get","List","Set","Delete","Purge","Recover","Restore"
  ]
}

# Create a Linked Service for KeyVault
resource "azurerm_data_factory_linked_service_key_vault" "kv-service" {
  name                = "kv-service"
  data_factory_id     = azurerm_data_factory.factory.id
  key_vault_id        = azurerm_key_vault.vault.id
  parameters          = {
    env     = local.environment
    prefix  = local.prefix_minus
  }
}



# Data Resource Group
resource "azurerm_resource_group" "storage-rg" {
  name                = upper("${local.prefix_minus}-data-${local.environment}-rg")
  location            = local.location 
}

# Storage Account in Data Resource Group
resource "azurerm_storage_account" "storage_acct" {
  name                     = "${local.prefix_minus}${local.environment}lake"
  resource_group_name      = azurerm_resource_group.storage-rg.name
  location                 = local.location 
  account_tier             = "Standard"
  account_replication_type = "LRS"
  account_kind             = "StorageV2"
  is_hns_enabled           = "true"
}

# Add Data Lake Storage capabilities
resource "azurerm_storage_data_lake_gen2_filesystem" "data_lake_fs" {
  name                    = "${local.prefix}dlfs"
  storage_account_id      = azurerm_storage_account.storage_acct.id

}

resource "null_resource" "local-command" {
  triggers = {
    build_number = "${timestamp()}"
  }
  provisioner "local-exec" {
    command =<<EOT
    az storage fs directory create \
    --name "data/input" \
    --file-system ${local.prefix}dlfs \
    --connection-string "${azurerm_storage_account.storage_acct.primary_connection_string}";
    az storage fs directory create \
    --name "data/destination" \
    --file-system ${local.prefix}dlfs \
    --connection-string "${azurerm_storage_account.storage_acct.primary_connection_string}"
    EOT
  }
  depends_on = [ azurerm_storage_data_lake_gen2_filesystem.data_lake_fs, ]
}

# Create example file
resource "azurerm_storage_blob" "example" {
  name                    = "data/input/example123.txt"
  storage_container_name  = "${local.prefix}dlfs"
  storage_account_name    = azurerm_storage_account.storage_acct.name
  type                    = "Block"
  source_content          = "hello world"
  depends_on = [ azurerm_storage_data_lake_gen2_filesystem.data_lake_fs, ]
}

# Upload CSV file
resource "azurerm_storage_blob" "cars_example" {
  name                    = "data/input/cars.csv"
  storage_container_name  = "${local.prefix}dlfs"
  storage_account_name    = azurerm_storage_account.storage_acct.name
  type                    = "Block"
  source                  = "data/cars.csv"
  depends_on = [ azurerm_storage_data_lake_gen2_filesystem.data_lake_fs, ]
}

# Upload BacPac file
resource "azurerm_storage_blob" "northwind_example" {
  name                    = "data/input/northwind.bacpac"
  storage_container_name  = "${local.prefix}dlfs"
  storage_account_name    = azurerm_storage_account.storage_acct.name
  type                    = "Block"
  source                  = "data/northwind.bacpac"
  depends_on = [ azurerm_storage_data_lake_gen2_filesystem.data_lake_fs, ]
}

# Create a Linked Service for Storage Account
resource "azurerm_data_factory_linked_service_azure_blob_storage" "blob-service" {
  name                = "blob-service"
  data_factory_id     = azurerm_data_factory.factory.id
  service_endpoint    = "@{concat('https://', linkedService().prefix, linkedService().env, 'lake.blob.core.windows.net')}"
  #service_endpoint    = azurerm_storage_account.storage_acct.primary_blob_endpoint
  use_managed_identity= true
  parameters          = {
    env     = local.environment
    prefix  = local.prefix_minus
  }
}

# Create a Linked Service for Table Storage
resource "azurerm_data_factory_linked_service_azure_table_storage" "example" {
  name                = "sa-table-service"
  data_factory_id     = azurerm_data_factory.factory.id
  connection_string   = azurerm_storage_account.storage_acct.primary_connection_string
  parameters          = {
    env     = local.environment
    prefix  = local.prefix_minus
  }
}

# Add Owner to the SP executing Terraform
resource "azurerm_role_assignment" "data-owner" {
  scope                 = azurerm_resource_group.storage-rg.id
  role_definition_name  ="Owner"
  principal_id          = data.azurerm_client_config.current.object_id
}

# Add Storage Blob Data Contributor to the ADF managed identity
resource "azurerm_role_assignment" "mi-blob-contributor" {
  scope                 = azurerm_storage_account.storage_acct.id
  role_definition_name  ="Storage Blob Data Contributor"
  principal_id          = "${lookup(azurerm_data_factory.factory.identity[0],"principal_id")}"
}

# Add Table Contributor to the ADF managed identity
resource "azurerm_role_assignment" "mi-table-contributor" {
  scope                 = azurerm_storage_account.storage_acct.id
  role_definition_name  ="Storage Table Data Contributor"
  principal_id          = "${lookup(azurerm_data_factory.factory.identity[0],"principal_id")}"
}

# Add storage account key to KeyVault
resource "azurerm_key_vault_secret" "blob_secret" {
  name         = "BLOBACCESSKEY"
  value        = azurerm_storage_account.storage_acct.primary_access_key 
  key_vault_id = azurerm_key_vault.vault.id
  depends_on   = [azurerm_key_vault_access_policy.pipeline-access, ]
}

# Add storage account key to KeyVault
resource "azurerm_key_vault_secret" "conn_secret" {
  name         = "BLOBCONNECTIONSTRING"
  value        = azurerm_storage_account.storage_acct.primary_connection_string
  key_vault_id = azurerm_key_vault.vault.id
  depends_on   = [azurerm_key_vault_access_policy.pipeline-access, ]
}

# Add SQL Server password to KeyVault
resource "azurerm_key_vault_secret" "sql_secret" {
  name         = "SQLPASSWORD"
  value        = random_password.password.result 
  key_vault_id = azurerm_key_vault.vault.id
  depends_on   = [azurerm_key_vault_access_policy.pipeline-access, ]
}

# Add SQL Server connection string to KeyVault
resource "azurerm_key_vault_secret" "sql_connstr" {
  name         = "SQLCONNSTR"
  value        = "Server=${azurerm_mssql_server.sql-server.name}.database.windows.net;Database=${azurerm_sql_database.db.name};User Id=${azurerm_mssql_server.sql-server.administrator_login};Password=${random_password.password.result};"
  key_vault_id = azurerm_key_vault.vault.id
  depends_on   = [azurerm_key_vault_access_policy.pipeline-access, ]
}

resource "azurerm_mssql_server" "sql-server" {
  name                         = "${local.prefix_minus}${local.environment}sqlserver"
  resource_group_name          = azurerm_resource_group.storage-rg.name
  location                     = local.location
  version                      = "12.0"
  administrator_login          = "sqladmin"
  administrator_login_password = random_password.password.result
  minimum_tls_version          = "1.2"
  tags = {
    environment = "production"
  }
}

resource "azurerm_mssql_firewall_rule" "example" {
  name             = "FirewallRule1"
  server_id        = azurerm_mssql_server.sql-server.id
  start_ip_address = "0.0.0.0"
  end_ip_address   = "0.0.0.0"
}

resource "azurerm_sql_database" "db" {
   name                 = "northwind"
   resource_group_name  = azurerm_resource_group.storage-rg.name
   location             = local.location
   server_name          = azurerm_mssql_server.sql-server.name
   tags = {
     environment = local.environment 
   }
   create_mode = "Default"
   import {
     storage_uri                  = azurerm_storage_blob.northwind_example.url
     storage_key                  = azurerm_storage_account.storage_acct.primary_access_key  
     storage_key_type             = "StorageAccessKey"
     administrator_login          = azurerm_mssql_server.sql-server.administrator_login
     administrator_login_password = random_password.password.result 
     authentication_type          = "SQL"
     operation_mode               = "Import"
   }
 }

resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "-_"
}
